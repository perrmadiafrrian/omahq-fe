{"version":3,"sources":["utils/CurrenyFormatter.js","../../src/observe.ts","../../src/InView.tsx","../../src/useInView.tsx","pages/item/AddForm.js","components/ConfimDialog.js","pages/item/index.js"],"names":["IDRFormatter","Intl","NumberFormat","style","currency","ObserverMap","RootIds","rootId","optionsToId","options","Object","key","root","observe","element","callback","id","instance","elements","observer","IntersectionObserver","entries","inView","entry","thresholds","Array","createObserver","callbacks","isPlainChildren","props","InView","node","_unobserveCb","handleNode","undefined","handleChange","componentDidUpdate","prevProps","this","componentWillUnmount","observeNode","threshold","rootMargin","trackVisibility","delay","unobserve","render","children","ref","as","tag","useInView","triggerOnce","skip","initialInView","React","state","setState","setRef","useEffect","result","defaultForm","store","price","quantity","total_price","AddForm","item","shown","onClose","houseId","onSaved","auth","useSelector","useState","form","setForm","showAlert","useContext","AlertContext","LoadingContext","loadingProcess","loadingDone","modalRef","useRef","LOADING_ADD_FORM","handleOnChange","e","name","new_form","target","value","parseInt","format","submit","a","axiosInstance","post","barcode","user_id","data","house_id","then","message","title","type","catch","response","errorResponseHandler","CSSTransition","nodeRef","in","timeout","classNames","unmountOnExit","className","closing","label","placeholder","onChange","disabled","onClick","ConfimDialog","onConfirm","confirmText","onCancel","Provider","defaultProps","BarcodeScan","lazy","NewItem","ItemPopUp","ItemButton","ItemPage","showModal","setShowModal","house","setHouse","items","setItems","setItem","itemPage","setItemPage","itemLoading","setItemLoading","hasMore","setHasMore","useParams","stickyHeader","setStickyHeader","showScanner","setShowScanner","newBarcode","setNewBarcode","showNewForm","setShowNewForm","showAddForm","setShowAddForm","showTake","setShowTake","LOADING_ITEM","get","has_more","filter","v","i","find","el","err","console","log","getItemsData","res","getHouseData","document","body","classList","add","remove","handleModalOpening","scrollListener","window_scroll","scrollTop","documentElement","window","addEventListener","removeEventListener","handleLoadMore","useCallback","currentPage","handleScanned","encodeURI","text","status","handleTakeOne","map","current_quantity","onAdd","onTake","onScanned"],"mappings":"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","file":"static/js/4.fc1b5fbc.chunk.js","sourcesContent":["// Currency Formatter for transaction price\nexport const IDRFormatter = Intl.NumberFormat(\"id-ID\", {\n  style: \"currency\",\n  currency: \"IDR\",\n});\n\n/**\n * Unformat a NumberFormat formatted string\n *\n * @param {String} stringNumber string number that are formatted\n * @param {String} locale locale for the format\n * @returns number that aren't formatted\n */\nexport const CurrencyUnformat = (stringNumber, locale = \"id-ID\") => {\n  let thousandSeparator = Intl.NumberFormat(locale)\n    .format(11111)\n    .replace(/\\p{Number}/gu, \"\");\n  let decimalSeparator = Intl.NumberFormat(locale)\n    .format(1.1)\n    .replace(/\\p{Number}/gu, \"\");\n\n  const value = parseFloat(\n    stringNumber\n      .replace(/[^\\d.-]/g, \"\")\n      .replace(new RegExp(\"\\\\\" + thousandSeparator, \"g\"), \"\")\n      .replace(new RegExp(\"\\\\\" + decimalSeparator), \".\")\n  );\n  return isNaN(value) ? value : 0;\n};\n","import { ObserverInstanceCallback } from './index';\n\nconst ObserverMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element, string> = new WeakMap();\n\nlet rootId = 0;\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root?: Element | null) {\n  if (!root) return '0';\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter((key) => options[key] !== undefined)\n    .map((key) => {\n      return `${key}_${\n        key === 'root' ? getRootId(options.root) : options[key]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  let id = optionsToId(options);\n  let instance = ObserverMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === 'undefined') {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    ObserverMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n) {\n  if (!element) return () => {};\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  let callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      ObserverMap.delete(id);\n    }\n  };\n}\n","import * as React from 'react';\nimport { IntersectionObserverProps, PlainChildrenProps } from './index';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== 'function';\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  static displayName = 'InView';\n  static defaultProps = {\n    threshold: 0,\n    triggerOnce: false,\n    initialInView: false,\n  };\n\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n    this.node = null;\n  }\n\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const { threshold, root, rootMargin, trackVisibility, delay } = this.props;\n\n    this._unobserveCb = observe(this.node, this.handleChange, {\n      threshold,\n      root,\n      rootMargin,\n      // @ts-ignore\n      trackVisibility,\n      // @ts-ignore\n      delay,\n    });\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    if (!isPlainChildren(this.props)) {\n      const { inView, entry } = this.state;\n      return this.props.children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      children,\n      as,\n      tag,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      ...props\n    } = this.props;\n\n    return React.createElement(\n      as || tag || 'div',\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","import * as React from 'react';\nimport { InViewHookResponse, IntersectionOptions } from './index';\nimport { useEffect } from 'react';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const unobserve = React.useRef<Function>();\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n  });\n  const setRef = React.useCallback(\n    (node) => {\n      if (unobserve.current !== undefined) {\n        unobserve.current();\n        unobserve.current = undefined;\n      }\n\n      // Skip creating the observer\n      if (skip) return;\n\n      if (node) {\n        unobserve.current = observe(\n          node,\n          (inView, entry) => {\n            setState({ inView, entry });\n\n            if (entry.isIntersecting && triggerOnce && unobserve.current) {\n              // If it should only trigger once, unobserve the element after it's inView\n              unobserve.current();\n              unobserve.current = undefined;\n            }\n          },\n          {\n            root,\n            rootMargin,\n            threshold,\n            // @ts-ignore\n            trackVisibility,\n            // @ts-ignore\n            delay,\n          },\n        );\n      }\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string so it won't change between renders.\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      delay,\n    ],\n  );\n\n  /* eslint-disable-next-line */\n  useEffect(() => {\n    if (!unobserve.current && state.entry && !triggerOnce && !skip) {\n      // If we don't have a ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n      // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n      setState({\n        inView: !!initialInView,\n      });\n    }\n  });\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n","import { useEffect } from \"react\";\nimport { useContext, useRef, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { CSSTransition } from \"react-transition-group\";\nimport { Input, InputGroup, Modal } from \"../../components\";\nimport AlertContext from \"../../contexts/AlertContext\";\nimport LoadingContext from \"../../contexts/LoadingContext\";\nimport axiosInstance from \"../../utils/axiosInstance\";\nimport { IDRFormatter } from \"../../utils/CurrenyFormatter\";\nimport errorResponseHandler from \"../../utils/errorResponseHandler\";\n\n// Default value for the form\nconst defaultForm = {\n  store: \"\",\n  price: 0,\n  quantity: \"\",\n  total_price: \"Rp 0,00\",\n};\n\n/**\n * Add Item form, handling incoming item transaction\n * consist of store, price and quantity\n *\n * @param {Object} param0 Component props\n * @returns JSX.Element that should be rendered\n */\nconst AddForm = ({ item, shown, onClose, houseId, onSaved }) => {\n  const auth = useSelector((state) => state.auth);\n  const [form, setForm] = useState({ ...defaultForm });\n  const { showAlert } = useContext(AlertContext);\n  const { loadingProcess, loadingDone } = useContext(LoadingContext);\n  const modalRef = useRef();\n  const LOADING_ADD_FORM = \"LOADING_ADD_FORM\";\n\n  //Reset the form on shown\n  useEffect(() => {\n    setForm(defaultForm);\n  }, [shown]);\n\n  /**\n   * Handling the state changes\n   *\n   * @param {Event} e Input change event\n   * @param {String} name form's name\n   */\n  const handleOnChange = (e, name) => {\n    const new_form = { ...form };\n    new_form[name] = e.target.value;\n    new_form.price = parseInt(new_form.price);\n    const total_price = new_form.price * new_form.quantity;\n    new_form.total_price = IDRFormatter.format(total_price);\n    setForm(new_form);\n  };\n\n  /**\n   * Processing the form to be submitted\n   * for the incoming transaction\n   */\n  const submit = async () => {\n    loadingProcess(LOADING_ADD_FORM);\n    await axiosInstance\n      .post(`/transaction/incoming`, {\n        ...form,\n        barcode: item.barcode,\n        user_id: auth.data.id,\n        house_id: houseId,\n      })\n      .then(({ data }) => {\n        showAlert({\n          message: `Item has been added`,\n          title: `Success`,\n          type: `success`,\n        });\n        onSaved(data);\n        onClose();\n      })\n      .catch(({ response }) => {\n        errorResponseHandler(response, showAlert);\n      });\n    loadingDone(LOADING_ADD_FORM);\n  };\n\n  return (\n    <CSSTransition\n      nodeRef={modalRef}\n      in={shown}\n      timeout={300}\n      classNames=\"modal-lg\"\n      unmountOnExit\n    >\n      <Modal\n        ref={modalRef}\n        title={<span className=\"text-lg\">Add {item?.name}</span>}\n        closing={() => onClose()}\n      >\n        <InputGroup label=\"Store\">\n          <Input\n            placeholder=\"Store\"\n            onChange={(e) => handleOnChange(e, \"store\")}\n            value={form.store}\n          />\n        </InputGroup>\n        <InputGroup label=\"Price\">\n          <Input\n            placeholder=\"Price\"\n            onChange={(e) => handleOnChange(e, \"price\")}\n            value={form.price}\n          />\n        </InputGroup>\n        <InputGroup label=\"Quantity\">\n          <Input\n            placeholder=\"Quantity\"\n            onChange={(e) => handleOnChange(e, \"quantity\")}\n            value={form.quantity}\n          />\n        </InputGroup>\n        <InputGroup label=\"Total Price\">\n          <Input placeholder=\"Total Price\" disabled value={form.total_price} />\n        </InputGroup>\n        <InputGroup>\n          <button\n            onClick={submit}\n            className=\"rounded text-white font-medium px-2 py-1 focus:outline-none hover:bg-green-500 bg-green-400 active:bg-green-600 transition duration-300 ease-in-out\"\n          >\n            Submit\n          </button>\n        </InputGroup>\n      </Modal>\n    </CSSTransition>\n  );\n};\n\nexport default AddForm;\n","import { FaQuestion } from \"react-icons/fa\";\nimport { IconContext } from \"react-icons\";\nimport { useRef } from \"react\";\nimport { CSSTransition } from \"react-transition-group\";\n\n/**\n * Confirmation dialog, expecting 4 props [shown, onConfirm, confirmText, onCancel]\n * which this dialog will be shown if `shown` is true with confirmation text of `confirmText`.\n * This dialog going to call `onConfirm` or `onCancel` based on the user interaction\n *\n * @param {Object} param0 Confirm dialog props\n * @returns JSX.Element to be rendered\n */\nconst ConfimDialog = ({ shown, onConfirm, confirmText, onCancel }) => {\n  const nodeRef = useRef();\n\n  return (\n    <CSSTransition\n      in={shown}\n      unmountOnExit\n      classNames=\"modal-lg\"\n      timeout={200}\n      nodeRef={nodeRef}\n    >\n      <div className=\"fixed inset-0 z-50 flex justify-center items-center\">\n        <div\n          onClick={onCancel}\n          className=\"absolute -z-10 inset-0 backdrop-filter backdrop-blur-sm bg-gray-500 bg-opacity-40\"\n        ></div>\n        <div\n          ref={nodeRef}\n          className=\"bg-white shadow-xl w-full sm:w-96 rounded-lg flex justify-center items-center mx-4 py-2 px-2\"\n        >\n          <div className=\"w-20 h-20 pr-4\">\n            <IconContext.Provider\n              value={{ className: `text-yellow-400 w-full h-full` }}\n            >\n              <FaQuestion />\n            </IconContext.Provider>\n          </div>\n          <div className=\"flex-1 flex space-y-4 flex-col\">\n            <span className=\"text-lg font-medium w-full\">{confirmText}</span>\n            <div className=\"w-full flex justify-end space-x-4\">\n              <button\n                onClick={onCancel}\n                className=\"px-2 py-1 text-gray-400 hover:text-gray-300 active:text-gray-400 focus:outline-none transition duration-300 ease-in-out font-medium\"\n              >\n                No\n              </button>\n              <button\n                onClick={onConfirm}\n                className=\"px-2 py-1 text-lg bg-green-600 hover:bg-green-500 active:bg-green-700 focus:outline-none transition duration-300 rounded-lg text-white font-medium\"\n              >\n                Sure!\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </CSSTransition>\n  );\n};\n\nConfimDialog.defaultProps = {\n  shown: false,\n  onConfirm: () => {},\n  onCancel: () => {},\n  confirmText: \"Confirm text not provided\",\n};\n\nexport default ConfimDialog;\n","import { Navigation } from \"../../components\";\nimport { useEffect, useState, lazy, useCallback, useContext } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport axiosInstance from \"../../utils/axiosInstance\";\nimport { useInView } from \"react-intersection-observer\";\nimport AddForm from \"./AddForm\";\nimport ConfimDialog from \"../../components/ConfimDialog\";\nimport { useSelector } from \"react-redux\";\nimport errorResponseHandler from \"../../utils/errorResponseHandler\";\nimport AlertContext from \"../../contexts/AlertContext\";\nimport LoadingContext from \"../../contexts/LoadingContext\";\nconst BarcodeScan = lazy(() => import(\"./BarcodeScan\"));\nconst NewItem = lazy(() => import(\"./NewItem\"));\nconst ItemPopUp = lazy(() => import(\"./ItemPopUp\"));\nconst ItemButton = lazy(() => import(\"./ItemButton\"));\n\n/**\n * Item page of the selected house. This page\n * going to show all the items in the selected house\n *\n * @returns Item page component to be rendered\n */\nconst ItemPage = () => {\n  const [showModal, setShowModal] = useState(false);\n  const [house, setHouse] = useState({});\n  const [items, setItems] = useState([]);\n  const [item, setItem] = useState({});\n  const [itemPage, setItemPage] = useState(0);\n  const [itemLoading, setItemLoading] = useState(false);\n  const [hasMore, setHasMore] = useState(false);\n  const { id } = useParams();\n  const [stickyHeader, setStickyHeader] = useState(false);\n  const { ref, inView } = useInView({ threshold: 0 });\n  const [showScanner, setShowScanner] = useState(false);\n  const [newBarcode, setNewBarcode] = useState(null);\n  const [showNewForm, setShowNewForm] = useState(false);\n  const [showAddForm, setShowAddForm] = useState(false);\n  const [showTake, setShowTake] = useState(false);\n  const auth = useSelector((state) => state.auth);\n  const { showAlert } = useContext(AlertContext);\n  const { loadingProcess, loadingDone } = useContext(LoadingContext);\n  const LOADING_ITEM = \"LOADING_ITEM\";\n\n  // TODO: ITEM SEARCH\n\n  /**\n   * Fetching items in the selected house\n   * it will load next page if it is available\n   */\n  useEffect(() => {\n    const getItemsData = async () => {\n      setItemLoading(true);\n      loadingProcess(LOADING_ITEM);\n      await axiosInstance\n        .get(`/item?house=${id}&limit=10&page=${itemPage}`)\n        .then(({ data }) => {\n          setHasMore(data.has_more);\n          setItems((items) => [\n            ...items,\n            ...data.items.filter((v, i) => {\n              if (items.find((el) => el.id === v.id)) return false;\n              return v.id;\n            }),\n          ]);\n          setItemLoading(false);\n        })\n        .catch((err) => console.log(err));\n      loadingDone(LOADING_ITEM);\n    };\n    getItemsData();\n  }, [id, itemPage, loadingProcess, loadingDone]);\n\n  /**\n   * Fetching house data on page loaded\n   */\n  useEffect(() => {\n    const getHouseData = async () => {\n      await axiosInstance\n        .get(`/house/${id}`)\n        .then((res) => {\n          setHouse(res.data);\n        })\n        .catch((err) => console.log(err));\n    };\n    getHouseData();\n  }, [id]);\n\n  /**\n   * Remove or hide scrollbar for the body\n   * if the modal is shown\n   */\n  useEffect(() => {\n    showModal && document.body.classList.add(\"overflow-hidden\");\n    !showModal && document.body.classList.remove(\"overflow-hidden\");\n  }, [showModal]);\n\n  /**\n   * Handle to show item data detail, including\n   * its transaction that has been done\n   *\n   * @param {Object} data Item data\n   */\n  const handleModalOpening = (data) => {\n    setShowNewForm(false);\n    setItem(data);\n    if (data) setShowModal(true);\n  };\n\n  /**\n   * Handle to set the header to be sticky\n   * on scrolled down after the navigation\n   */\n  useEffect(() => {\n    const scrollListener = () => {\n      const window_scroll =\n        document.body.scrollTop || document.documentElement.scrollTop;\n      if (window_scroll > 64) {\n        setStickyHeader(true);\n      } else {\n        setStickyHeader(false);\n      }\n    };\n\n    window.addEventListener(\"scroll\", scrollListener);\n\n    return () => {\n      window.removeEventListener(\"scroll\", scrollListener);\n    };\n  }, []);\n\n  /**\n   * Setting item's page to be incremented\n   * if it has more page\n   */\n  const handleLoadMore = useCallback(() => {\n    if (!itemLoading && hasMore) {\n      setItemPage((currentPage) => currentPage + 1);\n    }\n  }, [itemLoading, hasMore]);\n\n  /**\n   * if user scrolled down enough to the\n   * bottom of the transaction data, it\n   * will load more data\n   */\n  useEffect(() => {\n    if (inView) handleLoadMore();\n  }, [inView, handleLoadMore]);\n\n  /**\n   * Handling after barcode getting scanned\n   * getting the barcode to fetch item data\n   *\n   * @param {Object} result barcode scan result\n   */\n  const handleScanned = async (result) => {\n    setShowScanner(false);\n\n    if (result) {\n      loadingProcess(LOADING_ITEM);\n      await axiosInstance\n        .get(`/item/barcode/${encodeURI(result.text)}/house/${id}`)\n        .then((res) => {\n          handleModalOpening(res.data);\n        })\n        .catch(({ response }) => {\n          // If response status is `400` then open\n          // the new item form\n          if (response.status === 400) {\n            setNewBarcode(result.text);\n            setShowNewForm(true);\n          }\n        });\n      loadingDone(LOADING_ITEM);\n    }\n  };\n\n  /**\n   * Handling the addition after the item has been successfully\n   * updated\n   *\n   * @param {Object} data form data that has to be added\n   */\n  const handleOnAdd = (data) => {\n    setItems((items) => {\n      items.map((v, i) => {\n        if (v.id === data.id) {\n          v.quantity = data.current_quantity;\n        }\n        return v;\n      });\n      return items;\n    });\n    setItem((item) => {\n      item.quantity = data.current_quantity;\n      return item;\n    });\n  };\n\n  /**\n   * Handling when `take one` action has been\n   * fired. Item quantity going to be decreased\n   */\n  const handleTakeOne = async () => {\n    loadingProcess(LOADING_ITEM);\n    await axiosInstance\n      .post(`/transaction/usage`, {\n        house_id: id,\n        barcode: item.barcode,\n        user_id: auth.data.id,\n      })\n      .then((res) => {\n        const data = res.data;\n        setItems((items) => {\n          items.map((v, i) => {\n            if (v.id === item.id) {\n              v.quantity = data.current_quantity;\n            }\n            return v;\n          });\n          return items;\n        });\n        setItem((item) => {\n          item.quantity = data.current_quantity;\n          return item;\n        });\n        showAlert({\n          message: `One item taken successfully`,\n          title: `Success`,\n          type: `success`,\n        });\n      })\n      .catch(({ response }) => {\n        errorResponseHandler(response, showAlert);\n      });\n    loadingDone(LOADING_ITEM);\n    setShowTake(false);\n  };\n\n  return (\n    <div className=\"bg-gray-100 dark:bg-gray-700 min-h-screen\">\n      <Navigation />\n      <div className={`flex flex-col`}>\n        <div\n          className={`pt-6 pb-4 mb-4 px-6 w-full flex justify-between ${\n            stickyHeader\n              ? \"sticky top-0 z-20 bg-white dark:bg-gray-800 shadow-xl rounded-b-lg\"\n              : \"bg-indigo-100 dark:bg-indigo-900 shadow\"\n          } transition duration-500`}\n        >\n          <div className=\"px-6 sm:px-16 text-xl sm:text-3xl font-bold text-gray-900 dark:text-gray-100\">\n            {house?.name}\n          </div>\n          <div className=\"px-6 sm:px-16\">\n            <button\n              onClick={() => setShowScanner(true)}\n              className=\"bg-green-500 hover:bg-green-600 font-semibold duration-300 ease-in-out text-center rounded-lg text-lg py-2 px-4 text-white\"\n            >\n              Scan\n            </button>\n          </div>\n        </div>\n        <div className=\"flex flex-col sm:flex-row flex-wrap justify-center items-center\">\n          {items.map((v, i) => (\n            <ItemButton\n              key={i}\n              data={v}\n              onClick={() => handleModalOpening(v)}\n            />\n          ))}\n          <div className=\"\" ref={ref}></div>\n        </div>\n      </div>\n      <ItemPopUp\n        showModal={showModal}\n        setShowModal={setShowModal}\n        onAdd={() => setShowAddForm(true)}\n        onTake={() => setShowTake(true)}\n        item={item}\n      />\n      <BarcodeScan showScanner={showScanner} onScanned={handleScanned} />\n      <NewItem\n        shown={showNewForm}\n        barcode={newBarcode}\n        houseId={id}\n        onClose={(data) => handleModalOpening(data)}\n      />\n      <AddForm\n        shown={showAddForm}\n        item={item}\n        onClose={() => {\n          setShowAddForm(false);\n        }}\n        houseId={id}\n        onSaved={handleOnAdd}\n      />\n      <ConfimDialog\n        shown={showTake}\n        confirmText={`Are you sure going to take one of ${item?.name}?`}\n        onConfirm={handleTakeOne}\n        onCancel={() => setShowTake(false)}\n      />\n    </div>\n  );\n};\n\nexport default ItemPage;\n"],"sourceRoot":""}
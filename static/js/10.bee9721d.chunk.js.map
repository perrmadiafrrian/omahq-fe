{"version":3,"sources":["components/TextArea.js","pages/item/NewItem.js"],"names":["TextArea","forwardRef","ref","requiredFail","props","fails","className","defaultForm","name","description","image","quantity","NewItem","shown","barcode","onClose","onSubmit","houseId","modalRef","useRef","inputRef","showAlert","useContext","AlertContext","LoadingContext","loadingProcess","loadingDone","useState","form","setForm","valid","setValid","LOADING_NEW_ITEM","handleChange","e","type","target","validity","c_state","value","c_valid","submit","a","axiosInstance","post","house_id","then","data","message","title","catch","response","errorResponseHandler","useEffect","current","focus","CSSTransition","nodeRef","in","classNames","timeout","unmountOnExit","closing","label","onChange","placeholder","pattern","onClick"],"mappings":"sMAceA,EAZEC,sBAAW,WAA6BC,GAAS,IAAnCC,EAAkC,EAAlCA,aAAiBC,EAAiB,gCACzDC,EAAQF,EAAY,oBAE1B,OACE,kDACED,IAAKA,GACDE,GAFN,IAGEE,UAAS,gKAA2JD,S,gCCCpKE,EAAc,CAClBC,KAAM,KACNC,YAAa,KACbC,MAAO,KACPC,SAAU,GAwHGC,UA9GC,SAAC,GAAoD,IAAlDC,EAAiD,EAAjDA,MAAOC,EAA0C,EAA1CA,QAAmBC,GAAuB,EAAjCC,SAAiC,EAAvBD,SAASE,EAAc,EAAdA,QAC9CC,EAAWC,mBACXC,EAAWD,mBACTE,EAAcC,qBAAWC,KAAzBF,UAH0D,EAI1BC,qBAAWE,KAA3CC,EAJ0D,EAI1DA,eAAgBC,EAJ0C,EAI1CA,YAJ0C,EAK1CC,mBAAS,eAC5BpB,IAN6D,mBAK3DqB,EAL2D,KAKrDC,EALqD,OAQxCF,mBAAS,CACjCnB,MAAM,EACNC,aAAa,EACbC,OAAO,IAXyD,mBAQ3DoB,EAR2D,KAQpDC,EARoD,KAa5DC,EAAmB,mBAQnBC,EAAe,SAACC,EAAGC,GACnBD,EAAEE,OAAOC,SAASP,MACpBD,GAAQ,SAACS,GAEP,OADAA,EAAQH,GAAQD,EAAEE,OAAOG,MAClBD,KAGTP,GAAS,SAACS,GAER,OADAA,EAAQL,IAAQ,EACTK,MASPC,EAAM,uCAAG,sBAAAC,EAAA,6DACbjB,EAAeO,GADF,SAEPW,IACHC,KADG,mCAEChB,GAFD,IAGFiB,SAAU5B,EACVH,aAEDgC,MAAK,YAAe,IAAZC,EAAW,EAAXA,KACP1B,EAAU,CACR2B,QAAQ,QAAD,OAAUD,EAAKvC,KAAf,uBACPyC,MAAO,UACPd,KAAM,YAERpB,EAAQgC,MAETG,OAAM,YAAmB,IAAhBC,EAAe,EAAfA,SACRC,YAAqBD,EAAU9B,MAjBtB,OAmBbK,EAAYM,GAnBC,2CAAH,qDA0BZ,OAJAqB,qBAAU,WAAO,IAAD,EACd,UAAAjC,EAASkC,eAAT,SAAkBC,UACjB,CAAC1C,IAGF,8BACE,cAAC2C,EAAA,EAAD,CACEC,QAASvC,EACTwC,GAAI7C,EACJ8C,WAAW,QACXC,QAAS,IACTC,eAAa,EALf,SAOE,eAAC,IAAD,CAAOZ,MAAM,WAAW/C,IAAKgB,EAAU4C,QAAS/C,EAAhD,UACE,cAAC,IAAD,CAAYgD,MAAK,YAAjB,SACE,cAAC,IAAD,CACE7D,IAAKkB,EACL4C,SAAU,SAAC9B,GAAD,OAAOD,EAAaC,EAAG,SACjC+B,YAAW,gBAGf,cAAC,IAAD,CAAYF,MAAK,mBAAjB,SACE,cAAC,EAAD,CACEC,SAAU,SAAC9B,GAAD,OAAOD,EAAaC,EAAG,gBACjC+B,YAAW,uBAGf,cAAC,IAAD,CAAYF,MAAK,aAAjB,SACE,cAAC,IAAD,CACEC,SAAU,SAAC9B,GAAD,OAAOD,EAAaC,EAAG,UACjC+B,YAAW,aACXC,QAAQ,cACR/D,cAAe2B,EAAMpB,UAGzB,cAAC,IAAD,UACE,wBACEyD,QAAS1B,EACTnC,UAAU,sJAFZ","file":"static/js/10.bee9721d.chunk.js","sourcesContent":["import { forwardRef } from \"react\";\n\nconst TextArea = forwardRef(({ requiredFail, ...props }, ref) => {\n  const fails = requiredFail ? `border-red-300` : ``;\n\n  return (\n    <textarea\n      ref={ref}\n      {...props}\n      className={`resize-none px-2 py-1 rounded border-2 bg-transparent focus:outline-none border-gray-300 text-gray-900 dark:text-gray-50 focus:border-blue-300 w-full ${fails}`}\n    />\n  );\n});\n\nexport default TextArea;\n","import { useContext, useEffect, useRef, useState } from \"react\";\nimport { CSSTransition } from \"react-transition-group\";\nimport { Input, InputGroup, Modal } from \"../../components\";\nimport TextArea from \"../../components/TextArea\";\nimport AlertContext from \"../../contexts/AlertContext\";\nimport LoadingContext from \"../../contexts/LoadingContext\";\nimport axiosInstance from \"../../utils/axiosInstance\";\nimport errorResponseHandler from \"../../utils/errorResponseHandler\";\n\n// Default value for the form\nconst defaultForm = {\n  name: null,\n  description: null,\n  image: null,\n  quantity: 0,\n};\n\n/**\n * Pop-up modal for the new item that not yet registered\n * based on barcode\n *\n * @param {Object} props Component props\n * @returns JSX.Element to be rendered\n */\nconst NewItem = ({ shown, barcode, onSubmit, onClose, houseId }) => {\n  const modalRef = useRef();\n  const inputRef = useRef();\n  const { showAlert } = useContext(AlertContext);\n  const { loadingProcess, loadingDone } = useContext(LoadingContext);\n  const [form, setForm] = useState({\n    ...defaultForm,\n  });\n  const [valid, setValid] = useState({\n    name: true,\n    description: true,\n    image: true,\n  });\n  const LOADING_NEW_ITEM = \"LOADING_NEW_ITEM\";\n\n  /**\n   * Handling the value change based on input\n   *\n   * @param {Event} e input change event\n   * @param {String} type form type/name\n   */\n  const handleChange = (e, type) => {\n    if (e.target.validity.valid)\n      setForm((c_state) => {\n        c_state[type] = e.target.value;\n        return c_state;\n      });\n    else\n      setValid((c_valid) => {\n        c_valid[type] = false;\n        return c_valid;\n      });\n  };\n\n  /**\n   * Handle the submit event for the form\n   * then close the form if it succeed, or\n   * showing alert about the failure\n   */\n  const submit = async () => {\n    loadingProcess(LOADING_NEW_ITEM);\n    await axiosInstance\n      .post(`/item`, {\n        ...form,\n        house_id: houseId,\n        barcode,\n      })\n      .then(({ data }) => {\n        showAlert({\n          message: `Item ${data.name} successfully saved`,\n          title: \"Success\",\n          type: \"success\",\n        });\n        onClose(data);\n      })\n      .catch(({ response }) => {\n        errorResponseHandler(response, showAlert);\n      });\n    loadingDone(LOADING_NEW_ITEM);\n  };\n\n  useEffect(() => {\n    inputRef.current?.focus();\n  }, [shown]);\n\n  return (\n    <div>\n      <CSSTransition\n        nodeRef={modalRef}\n        in={shown}\n        classNames=\"modal\"\n        timeout={300}\n        unmountOnExit\n      >\n        <Modal title=\"New Item\" ref={modalRef} closing={onClose}>\n          <InputGroup label={`Item Name`}>\n            <Input\n              ref={inputRef}\n              onChange={(e) => handleChange(e, \"name\")}\n              placeholder={`Item Name`}\n            />\n          </InputGroup>\n          <InputGroup label={`Item Description`}>\n            <TextArea\n              onChange={(e) => handleChange(e, \"description\")}\n              placeholder={`Item Description`}\n            />\n          </InputGroup>\n          <InputGroup label={`Item Image`}>\n            <Input\n              onChange={(e) => handleChange(e, \"image\")}\n              placeholder={`Item Image`}\n              pattern=\"https?://.+\"\n              requiredFail={!valid.image}\n            />\n          </InputGroup>\n          <InputGroup>\n            <button\n              onClick={submit}\n              className=\"rounded text-white font-medium px-2 py-1 focus:outline-none hover:bg-green-500 bg-green-400 active:bg-green-600 transition duration-300 ease-in-out\"\n            >\n              Submit\n            </button>\n          </InputGroup>\n        </Modal>\n      </CSSTransition>\n    </div>\n  );\n};\n\nexport default NewItem;\n"],"sourceRoot":""}
{"version":3,"sources":["pages/home/HomeForm.js","pages/home/index.js"],"names":["HomeForm","showModal","setShowModal","editId","houseName","cleanOnOpen","setHouses","addAlert","onClose","modalRef","useRef","inputRef","useState","nameValue","setNameValue","isProcessing","setIsProcessing","requiredFail","setRequiredFail","auth","useSelector","state","useContext","LoadingContext","loadingProcess","loadingDone","LOADING_PROCESS","useEffect","current","focus","handleSubmitData","a","undefined","axiosInstance","patch","name","then","res","houses","newHouses","map","v","i","id","message","data","title","type","catch","err","response","errorResponseHandler","console","log","finally","post","owner_id","edit","CSSTransition","in","timeout","unmountOnExit","nodeRef","classNames","width","ref","closing","className","label","placeholder","disabled","onChange","e","target","value","xmlns","fill","viewBox","cx","cy","r","stroke","strokeWidth","d","onClick","defaultProps","Home","history","useHistory","showModalNew","setShowModalNew","showModalEdit","setShowModalEdit","showAlert","AlertContext","editData","setEditData","handleHouseRightClick","preventDefault","c_houses","handleAddAlert","newAlert","fetchHouses","useCallback","request","result_houses","push","onContextMenu","onBlur","Provider"],"mappings":"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","file":"static/js/7.b59a6d33.chunk.js","sourcesContent":["import { CSSTransition } from \"react-transition-group\";\nimport { Modal, Input, InputGroup } from \"../../components\";\nimport { useContext, useEffect, useRef, useState } from \"react\";\nimport axiosInstance from \"../../utils/axiosInstance\";\nimport { useSelector } from \"react-redux\";\nimport LoadingContext from \"../../contexts/LoadingContext\";\nimport errorResponseHandler from \"../../utils/errorResponseHandler\";\n\n/**\n * Form for editing or creating new house data\n * which gonna show a modal consisting of an\n * input for house's name\n *\n * @param {Object} props form property\n * @returns Form component to be rendered\n */\nconst HomeForm = ({\n  showModal,\n  setShowModal,\n  editId,\n  houseName,\n  cleanOnOpen,\n  setHouses,\n  addAlert,\n  onClose,\n}) => {\n  const modalRef = useRef(null);\n  const inputRef = useRef();\n  const [nameValue, setNameValue] = useState(houseName);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [requiredFail, setRequiredFail] = useState(false);\n  const auth = useSelector((state) => state.auth);\n  const { loadingProcess, loadingDone } = useContext(LoadingContext);\n  const LOADING_PROCESS = \"HOME_FORM\";\n\n  /**\n   * On modal showing, its going to check\n   * if input should be cleared and check\n   * if the house name is available, set\n   * the input to the house name if it is\n   * available\n   */\n  useEffect(() => {\n    if (cleanOnOpen) setNameValue(\"\");\n    if (houseName) setNameValue(houseName);\n    setRequiredFail(false);\n  }, [showModal, cleanOnOpen, houseName]);\n\n  /**\n   * Focusing to the input on modal shown\n   */\n  useEffect(() => {\n    if (showModal) inputRef?.current?.focus();\n  }, [showModal, inputRef]);\n\n  /**\n   * Set the name state based on the input\n   * changes\n   *\n   * @param {Event} e input change event\n   */\n  const handleNameChange = (e) => {\n    setNameValue(e.target.value);\n  };\n\n  /**\n   * Handling the submit event for the form\n   * checking if the form is an edit form\n   * or a new form\n   *\n   * @returns boolean\n   */\n  const handleSubmitData = async () => {\n    if (nameValue === \"\" || nameValue === undefined) {\n      setRequiredFail(true);\n      return false;\n    }\n\n    setIsProcessing(true);\n    loadingProcess(LOADING_PROCESS);\n\n    if (editId) {\n      await axiosInstance\n        .patch(`/house/${editId}`, {\n          name: nameValue,\n        })\n        .then((res) => {\n          setHouses((houses) => {\n            const newHouses = [...houses];\n            newHouses.map((v, i) => {\n              if (v.id === editId) v.name = nameValue;\n              return v;\n            });\n            return newHouses;\n          });\n          addAlert({\n            message: `${res.data.name} has been successfully saved`,\n            title: `Success`,\n            type: \"success\",\n          });\n        })\n        .catch((err) => {\n          if (err.response) {\n            errorResponseHandler(err.response, addAlert);\n          } else console.log(err);\n        })\n        .finally(() => {\n          setIsProcessing(false);\n          setShowModal(false);\n          onClose();\n        });\n    } else {\n      await axiosInstance\n        .post(`/house`, {\n          name: nameValue,\n          owner_id: auth.data.id,\n        })\n        .then((res) => {\n          res.data.edit = false;\n          setHouses((houses) => [...houses, res.data]);\n          addAlert({\n            message: `${res.data.name} has been successfully saved`,\n            title: `Success`,\n            type: \"success\",\n          });\n        })\n        .catch((err) => {\n          if (err.response) {\n            errorResponseHandler(err.response, addAlert);\n          } else console.log(err);\n        })\n        .finally(() => {\n          setIsProcessing(false);\n          setShowModal(false);\n          onClose();\n        });\n    }\n\n    loadingDone(LOADING_PROCESS);\n    return true;\n  };\n\n  /**\n   * Handle the modal closing event, modal going\n   * to be closed if the form is not in processing\n   */\n  const handleModalClosing = () => {\n    if (!isProcessing) {\n      setShowModal(false);\n      onClose();\n    }\n  };\n\n  return (\n    <CSSTransition\n      in={showModal}\n      timeout={300}\n      unmountOnExit\n      nodeRef={modalRef}\n      classNames=\"modal\"\n    >\n      <Modal\n        width=\"sm\"\n        ref={modalRef}\n        closing={handleModalClosing}\n        title={editId ? `Edit House` : `New House`}\n      >\n        <div className=\"flex flex-col px-1\">\n          <InputGroup label=\"House Name\">\n            <Input\n              ref={inputRef}\n              requiredFail={requiredFail}\n              placeholder=\"House Name\"\n              disabled={isProcessing}\n              onChange={handleNameChange}\n              value={nameValue}\n            />\n          </InputGroup>\n          <div className=\"flex justify-end\">\n            {!isProcessing ? (\n              <button\n                onClick={handleSubmitData}\n                className={`px-2 py-1 rounded font-medium duration-300 ease-in-out focus:outline-none\n                text-white bg-green-400 hover:bg-green-300 active:bg-green-500`}\n              >\n                Save\n              </button>\n            ) : (\n              <button\n                className={`px-2 py-1 inline-flex items-center font-medium rounded duration-300 ease-in-out focus:outline-none\n              text-white bg-green-400 hover:bg-green-300 active:bg-green-500`}\n              >\n                <svg\n                  className=\"animate-spin mr-3 h-5 w-5 text-white\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  fill=\"none\"\n                  viewBox=\"0 0 24 24\"\n                >\n                  <circle\n                    className=\"opacity-25\"\n                    cx=\"12\"\n                    cy=\"12\"\n                    r=\"10\"\n                    stroke=\"currentColor\"\n                    strokeWidth=\"4\"\n                  ></circle>\n                  <path\n                    className=\"opacity-75\"\n                    fill=\"currentColor\"\n                    d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n                  ></path>\n                </svg>\n                Processing\n              </button>\n            )}\n          </div>\n        </div>\n      </Modal>\n    </CSSTransition>\n  );\n};\n\n//Setting the default props for the form\nHomeForm.defaultProps = {\n  setShowModal: () => {},\n  showModal: false,\n  houseName: \"\",\n  editId: null,\n  onClose: () => {},\n  addAlert: () => {},\n};\n\nexport default HomeForm;\n","import { Navigation } from \"../../components\";\nimport { GiHouse } from \"react-icons/gi\";\nimport { FaEdit, FaPlus } from \"react-icons/fa\";\nimport { IconContext } from \"react-icons\";\nimport axiosInstance from \"../../utils/axiosInstance\";\nimport { useSelector } from \"react-redux\";\nimport { useCallback, useContext, useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport HomeForm from \"./HomeForm\";\nimport AlertContext from \"../../contexts/AlertContext\";\nimport LoadingContext from \"../../contexts/LoadingContext\";\nimport errorResponseHandler from \"../../utils/errorResponseHandler\";\n\n/**\n * Home page that shows the user's available\n * houses, user can create and edit the house\n * name\n *\n * @returns houses component to be rendered\n */\nconst Home = () => {\n  const auth = useSelector((state) => state.auth);\n  const history = useHistory();\n  const [houses, setHouses] = useState([]);\n  const [showModalNew, setShowModalNew] = useState(false);\n  const [showModalEdit, setShowModalEdit] = useState(false);\n  const { showAlert } = useContext(AlertContext);\n  const { loadingProcess, loadingDone } = useContext(LoadingContext);\n  const [editData, setEditData] = useState(null);\n\n  /**\n   * Handle the house link that change\n   * page location to house with the\n   * given house's id\n   *\n   * @param {Number} id\n   */\n  const handleHouseClick = (id) => {\n    history.push(`/house/${id}`);\n  };\n\n  /**\n   * Handling the house right click event\n   * to change house action to become an\n   * edit action for the house\n   *\n   * @param {Event} e\n   * @param {Number} id\n   */\n  const handleHouseRightClick = (e, id) => {\n    e.preventDefault();\n    const c_houses = [...houses];\n    c_houses.map((v, i) => {\n      v.edit = false;\n      return v;\n    });\n    if (id !== null) c_houses[id].edit = c_houses[id].edit === false;\n    setHouses(c_houses);\n  };\n\n  /**\n   * Handling the house edit action\n   * to change the edited house data\n   *\n   * @param {Object} house house data\n   */\n  const handleHouseEdit = (house) => {\n    setEditData(house);\n  };\n\n  /**\n   * Handling the alert to be showing the\n   * given alert data\n   *\n   * @param {Object} newAlert alert data\n   */\n  const handleAddAlert = (newAlert) => {\n    showAlert(newAlert);\n  };\n\n  /**\n   * Handling the edit on close event\n   * to set the edit data to be null\n   */\n  const handleEditClosing = () => {\n    setEditData(null);\n  };\n\n  const fetchHouses = useCallback(async () => {\n    loadingProcess(\"FETCH_HOUSES\");\n    await axiosInstance\n      .request(`/house/byowner/${auth.data.id}`)\n      .then((res) => {\n        const result_houses = res.data.houses;\n        result_houses.map((v, i) => {\n          v.edit = false;\n          return v;\n        });\n        setHouses(result_houses);\n        loadingDone(\"FETCH_HOUSES\");\n      })\n      .catch(({ response }) => {\n        errorResponseHandler(response, showAlert);\n      });\n  }, [auth.data.id, showAlert, loadingProcess, loadingDone]);\n\n  /**\n   * Fetch house data everytime\n   * the user load the page\n   */\n  useEffect(() => {\n    fetchHouses();\n  }, [fetchHouses]);\n\n  /**\n   * On `editData` changes, it will check if\n   * `editData` is empty or not, then show\n   * the modal if `editData` is available\n   */\n  useEffect(() => {\n    if (editData) {\n      setShowModalEdit(true);\n    }\n  }, [editData]);\n\n  return (\n    <div className=\"bg-gray-100 dark:bg-gray-700 min-h-screen\">\n      <Navigation />\n      <div className=\"py-10 lg:py-16\">\n        <div className=\"flex flex-wrap justify-center\">\n          {houses.map((v, i) => {\n            return (\n              <button\n                key={i}\n                onClick={\n                  v.edit\n                    ? () => handleHouseEdit(v)\n                    : () => handleHouseClick(v.id)\n                }\n                onContextMenu={(e) => handleHouseRightClick(e, i)}\n                onBlur={(e) => handleHouseRightClick(e, null)}\n                className={`w-32 h-32 m-2 lg:w-40 lg:h-40 shadow-lg  ${\n                  v.edit\n                    ? \"text-yellow-400 hover:text-yellow-500\"\n                    : \"text-blue-500 hover:text-blue-600\"\n                } rounded-lg bg-white hover:bg-gray-200 active:bg-gray-400 dark:bg-gray-800 dark:hover:bg-gray-600 dark:active:bg-gray-500 focus:outline-none flex flex-col items-center justify-around transition-colors duration-200 ease-in-out`}\n              >\n                <IconContext.Provider\n                  value={{\n                    className: `w-14 h-14 lg:w-20 lg:h-20`,\n                  }}\n                >\n                  {v.edit ? <FaEdit /> : <GiHouse />}\n                </IconContext.Provider>\n                <span className=\"text-base font-medium md:text-xl\">\n                  {v.name}\n                </span>\n              </button>\n            );\n          })}\n          <button\n            onClick={() => setShowModalNew(true)}\n            className={`w-32 h-32 m-2 lg:w-40 lg:h-40 lg:m-2\n            text-gray-500 hover:text-gray-600 border-gray-200 bg-gray-100 active:bg-gray-300 active:border-gray-300 hover:bg-gray-200\n            dark:text-gray-100 dark:hover:text-gray-200 dark:border-gray-900 dark:bg-gray-700 dark:active:bg-gray-500 dark:hover:bg-gray-600\n            border-4 border-dashed rounded-lg flex flex-col items-center justify-around focus:outline-none transition-colors duration-200 ease-in-out`}\n          >\n            <IconContext.Provider\n              value={{\n                className: `w-14 h-14 lg:w-20 lg:h-20`,\n              }}\n            >\n              <FaPlus />\n            </IconContext.Provider>\n            <span className=\"text-base font-medium md:text-xl\">New House</span>\n          </button>\n        </div>\n      </div>\n      <HomeForm\n        setShowModal={setShowModalNew}\n        showModal={showModalNew}\n        cleanOnOpen\n        setHouses={setHouses}\n        addAlert={handleAddAlert}\n      />\n      <HomeForm\n        setShowModal={setShowModalEdit}\n        showModal={showModalEdit}\n        editId={editData?.id}\n        houseName={editData?.name}\n        setHouses={setHouses}\n        addAlert={handleAddAlert}\n        onClose={handleEditClosing}\n      />\n    </div>\n  );\n};\n\nexport default Home;\n"],"sourceRoot":""}
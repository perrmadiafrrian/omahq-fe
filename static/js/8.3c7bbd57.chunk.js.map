{"version":3,"sources":["pages/item/BarcodeScan.js"],"names":["BarcodeScan","showScanner","onScanned","ref","useRef","useState","scanner","setScanner","input","setInput","inputRef","useEffect","current","focus","handleScan","err","result","nodeRef","in","timeout","classNames","unmountOnExit","className","onClick","c_value","onKeyDown","e","key","length","text","onChange","target","value","replace","pattern","width","height","torch","delay","onUpdate"],"mappings":"+KA8GeA,UAlGK,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,YAAaC,EAAgB,EAAhBA,UAC5BC,EAAMC,mBADsC,EAEpBC,oBAAS,GAFW,mBAE3CC,EAF2C,KAElCC,EAFkC,OAGxBF,mBAAS,IAHe,mBAG3CG,EAH2C,KAGpCC,EAHoC,KAI5CC,EAAWN,mBAMjBO,qBAAU,WACM,IAAD,EAATL,IACF,UAAAI,EAASE,eAAT,SAAkBC,QAClBJ,EAAS,OAEV,CAACH,EAASL,IAKb,IAAMa,EAAa,SAACC,EAAKC,GACvBd,EAAUc,IAwBZ,OACE,cAAC,IAAD,CACEC,QAASd,EACTe,GAAIjB,EACJkB,QAAS,IACTC,WAAW,QACXC,eAAa,EALf,SAOE,sBAAKC,UAAU,sDAAf,UACE,qBACEC,QAAS,WACPT,EAAW,EAAM,OAEnBQ,UAAU,sFAEZ,sBAAKA,UAAU,oCAAoCnB,IAAKA,EAAxD,UACE,wBACEoB,QAAS,kBAAMhB,GAAW,SAACiB,GAAD,OAAcA,MACxCF,UAAU,uJAFZ,SAIGhB,EAAO,6BAETA,EACC,qBAAKgB,UAAU,kGAAf,SACE,cAAC,IAAD,CACEG,UA/Ba,SAACC,GACZ,UAAVA,EAAEC,KAAmBnB,EAAMoB,QAAU,IACvCd,EAAW,EAAM,CAAEe,KAAMrB,KA8BfsB,SA1CO,SAACJ,GACpBjB,EAASiB,EAAEK,OAAOC,MAAMC,QAAQ,KAAM,MA0C1BD,MAAOxB,EACPL,IAAKO,EACLwB,QAAQ,aAIZ,qBAAKZ,UAAU,6BAAf,SACE,cAAC,IAAD,CACEa,MAAO,IACPC,OAAQ,IACRC,OAAO,EACPC,MAAO,IACPC,SAAU,SAACxB,EAAKC,GACVA,GACFF,EAAWC,EAAKC","file":"static/js/8.3c7bbd57.chunk.js","sourcesContent":["import { useEffect, useRef, useState } from \"react\";\nimport BarcodeScannerComponent from \"react-qr-barcode-scanner\";\nimport { CSSTransition } from \"react-transition-group\";\nimport { Input } from \"../../components\";\n\n/**\n * Barcode scan component using webcam or\n * getting item barcode using barcode scanner\n *\n * @param {Object} props component props\n * @returns\n */\nconst BarcodeScan = ({ showScanner, onScanned }) => {\n  const ref = useRef();\n  const [scanner, setScanner] = useState(false);\n  const [input, setInput] = useState(\"\");\n  const inputRef = useRef();\n\n  /**\n   * Focusing to the input if user select\n   * to use a barcode scanner\n   */\n  useEffect(() => {\n    if (scanner) {\n      inputRef.current?.focus();\n      setInput(\"\");\n    }\n  }, [scanner, showScanner]);\n\n  /**\n   * Handle the scan event\n   */\n  const handleScan = (err, result) => {\n    onScanned(result);\n  };\n\n  /**\n   * Handle the input change event\n   *\n   * @param {Event} e input change event\n   */\n  const handleChange = (e) => {\n    setInput(e.target.value.replace(/\\D/, \"\"));\n  };\n\n  /**\n   * Handling keyboard input event to check\n   * if it is an `Enter` event\n   *\n   * @param {Event} e keyboard event\n   */\n  const handleEnterPressed = (e) => {\n    if (e.key === \"Enter\" && input.length >= 13) {\n      handleScan(null, { text: input });\n    }\n  };\n\n  return (\n    <CSSTransition\n      nodeRef={ref}\n      in={showScanner}\n      timeout={300}\n      classNames=\"modal\"\n      unmountOnExit\n    >\n      <div className=\"fixed z-40 inset-0 flex justify-center items-center\">\n        <div\n          onClick={() => {\n            handleScan(null, null);\n          }}\n          className=\"absolute bg-gray-700 bg-opacity-40 -z-10 inset-0 backdrop-filter backdrop-blur-sm\"\n        ></div>\n        <div className=\"py-3 px-2 flex flex-col space-y-6\" ref={ref}>\n          <button\n            onClick={() => setScanner((c_value) => !c_value)}\n            className=\"px-3 py-2 rounded-lg bg-green-500 text-lg font-semibold shadow-xl text-white hover:bg-green-400 active:bg-green-600 transition duration-300 ease-out\"\n          >\n            {scanner ? `Use Webcam` : `Use Scanner`}\n          </button>\n          {scanner ? (\n            <div className=\"rounded-lg bg-white dark:bg-gray-500 text-gray-900 dark:text-gray-50 px-4 py-2 shadow-lg w-full\">\n              <Input\n                onKeyDown={handleEnterPressed}\n                onChange={handleChange}\n                value={input}\n                ref={inputRef}\n                pattern=\"[0-9]*\"\n              />\n            </div>\n          ) : (\n            <div className=\"rounded-lg overflow-hidden\">\n              <BarcodeScannerComponent\n                width={500}\n                height={500}\n                torch={false}\n                delay={1000}\n                onUpdate={(err, result) => {\n                  if (result) {\n                    handleScan(err, result);\n                  }\n                }}\n              />\n            </div>\n          )}\n        </div>\n      </div>\n    </CSSTransition>\n  );\n};\n\nexport default BarcodeScan;\n"],"sourceRoot":""}